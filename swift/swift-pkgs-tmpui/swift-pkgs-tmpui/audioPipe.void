//
//  audioPipe.swift
//  swift-pkgs-tmpui
//
//  Created by Jess
//

import Foundation
import Accelerate

let stftWindowSeconds = 0.015
let stftHopSeconds = 0.005
let timeScale = 1.0
let targetSampleRate = 44100
let topDB = 80

// ... Blah: https://github.com/AlbanPerli/iOS-Spectrogram/blob/master/UIImage%2BSpectrogram/FFT.swift

public func fft(_ input: [Float]) -> (real:[Float], img:[Float]) {
    
    var real = input
    let size = real.count
    
    var imaginary = [Float](repeating: 0.0, count: input.count)
    var splitComplex = DSPSplitComplex(realp: &real, imagp: &imaginary)
    
    let length = vDSP_Length(floor(log2(Float(size))))
    let radix = FFTRadix(kFFTRadix5)
    let weights = vDSP_create_fftsetup(length, radix)
    
    vDSP_fft_zip(weights!, &splitComplex, 1, length, FFTDirection(FFT_FORWARD))
    
    vDSP_destroy_fftsetup(weights)
    
    return (real,imaginary)
}

func generateSpectrogram(waveform : [Array<Any>]) -> [Array<Any>] {

    let window_length_samples = round(Double(targetSampleRate) * stftWindowSeconds)
    let hop_length_samples = round(Double(targetSampleRate) * stftHopSeconds)
    let fft_length = pow(2, ceil(log(window_length_samples) / log(2.0)))
    let n = vDSP_Length(1024)
    var c = [Float](repeating: 0,
                    count: Int(n))

    var fftWindow = vDSP_hann_window(&c, n, Int32(fft_length))
    y = padReflect(y, Math.floor(nFft / 2));

    let stftMatrix = fft(y, 2);
    let [spec, nFft] = magSpectrogram(stftMatrix, params.power);
    if (!params.topDB) {
      params.topDB = 80.0;
    }

    const amin = 1e-10;
    const transformed_mel_spec = _powerToDb(spec, amin, params.topDB);

    return transformed_mel_spec;

}
