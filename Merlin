#!/bin/bash




# if [ -z "$__zsh" ]; then
#    __zsh=1 exec "$SHELL" "$0" "$@"
# fi
#
# A ridiculous build script for Merlin AI web demos
# WIP by Jess @ github.com/Jesssullivan/tmpUI

# options we can configure:
BUILDDEMOS=false
BUILDANNOS=false
USEFLASK=false
USENODEFILE="none"
INCOGNITO=false
SERVE=false
MONGODB=false
CLEANUPALL=false
CLEANUPBUNDLES=false
CLEANUPRENDERS=false
CHECKNODE=true
CHECKVENV=true
AUTOSETUP=false
SETFLASK=false

#  shell --> browser:
# MERLINSSHELL=$(ps -o fname --no-headers $$)
MERLINSSHELL="bash"
DEBBROWSER="chromium"
MACBROWSER=open

# ssl domain:
DOMAIN=./demos/web_demos

## logs ##

# logger name:
CONSOLE="Merlin:"

# stdout to some log files here instead of to the console:
LOGDIR="./.built_logs/"

# mongodb logs:
MONGOFILE=mongo_log.txt
MONGOLOG=$LOGDIR$MONGOFILE

# demo server logs:
FLASKFILE=flask_log.txt
FLASKLOG=$LOGDIR$FLASKFILE

# demos logs:
DEMOFILE=demos_log.txt
DEMOLOG=$LOGDIR$DEMOFILE

# general webpack logs:
ANNOTOOLFILE=anno_tool_log.txt
TOOLLOG=$LOGDIR$ANNOTOOLFILE

ANNOPHOTOFILE=anno_photo_log.txt
PHOTOLOG=$LOGDIR$ANNOPHOTOFILE

ANNOAUDIOFILE=anno_audio_log.txt
AUDIOLOG=$LOGDIR$ANNOAUDIOFILE

# ssl log:
SSLLOGFILE=node_http_log.txt
SSLLOG=$LOGDIR$SSLLOGFILE

# check python path:
VENVPATH=$(which python3)

#  check log stuff:
if [[ ! -d "$LOGDIR" ]]; then
  mkdir $LOGDIR
fi

# initialize log files if they aren't already there:
touch $FLASKLOG
touch $DEMOLOG
touch $TOOLLOG
touch $PHOTOLOG
touch $AUDIOLOG
touch $SSLLOG
touch $MONGOLOG

## build ##

# use a trap to make sure we quit child processes,
# upon receiving ` ^C `
# (e.g. flask @ `stdin`)
trap "kill 0" EXIT

## parse arguments ##

POSITIONAL=()

while [[ $# -gt 0 ]] ; do
  key="$1"
  case $key in
        -d | --demos)
        if [ $BUILDDEMOS == false ] ; then
          BUILDDEMOS=true
        fi
        shift
        ;;
        -a | --annotators)
        if [ $BUILDANNOS == false ] ; then
          BUILDANNOS=true
        fi
        shift
        ;;
        -s | --serve)
        if [ $SERVE == false ] ; then
          SERVE=true
        fi
        shift
        ;;
        -w | --watch)
        if [ $USEWATCH == false ] ; then
          USEWATCH=true
        fi
        shift
        ;;
        -f | --flask)
        if [[ $SERVE == true && $USEFLASK == false ]] ; then
          USEFLASK=true
        fi
        shift
        ;;
        -h | --http-server)
        if [[ $SERVE == true && $USEFLASK == false ]] ; then
          USENODEFILE="$2"
        fi
        shift
        ;;
        -i | --incognito)
        if [[ $SERVE == true && $INCOGNITO == false ]] ; then
          INCOGNITO=true
        fi
        shift
        ;;
        -ca | --clean-all)
        if [ $CLEANUPALL == false ] ; then
          CLEANUPALL=true
        fi
        shift
        ;;
        -cb | --clean-bundles)
        if [ $CLEANUPBUNDLES == false ] ; then
          CLEANUPBUNDLES=true
        fi
        shift
        ;;
        -cr | --clean-renders)
        if [ $CLEANUPRENDERS == false ] ; then
          CLEANUPRENDERS=true
        fi
        shift
        ;;
        -cn | --check-node)
        if [ $CHECKNODE == false ] ; then
          CHECKNODE=true
        else
          CHECKNODE=false
        fi
        shift
        ;;
        -cv | --check-venv)
        if [ $CHECKVENV == false ] ; then
          CHECKVENV=true
        else
          CHECKVENV=false
        fi
        shift
        ;;
        -as | --auto-setup)
        if [ $AUTOSETUP == false ] ; then
          AUTOSETUP=true
        else
          AUTOSETUP=false
        fi
        shift
        ;;
        -sf | --setup-flask)
        if [ $SETFLASK == false ] ; then
          SETFLASK=true
        else
          SETFLASK=false
        fi
        shift
        ;;
        *) # unknown
        echo -e "\n$CONSOLE Received unknown argument!  Exiting....\n"
        POSITIONAL+=("$1")
        exit 1
        ;;
    esac
done

# check environment before continuing:

# check node modules:
if [[ ${CHECKNODE} == true && ! -d "./node_modules" ]] ; then
  if [ ${AUTOSETUP} == true ]  ; then
    npm install
    wait
  else
    echo -e "\n$CONSOLE ...did not find ./node_modules!
    please install node depends, e.g.

    npm install

    ...and try again. \n"

    exit 0
  fi
fi

# make sure we actually in the right venv:
if [[ ${CHECKVENV} == true && ! $VENVPATH == *_venv/bin/* ]] ; then
  if [ ${AUTOSETUP} == true ] ; then
    python3 -m venv merlinai_venv
    pip3 install -r requirements.txt
    echo -e "\n$CONSOLE  ...Setup Venv!
    please source into merlinai_venv before continuing, e.g. \n
    source merlinai_venv/bin/activate
    pip3 install -r requirements.txt

    "
    exit 0
  else
    echo -e "\n$CONSOLE  ...venv path not found!
    please source into venv and try again, e.g. \n

    # if needed, create new venv:
    python3 -m venv merlinai_venv

    # source:
    source merlinai_venv/bin/activate

    # install Python depends:
    pip3 install -r requirements.txt
    \n"

    exit 0
  fi
fi


# show user relevant commands only-
if [[ "$OSTYPE" == "darwin"* ]] ; then
  USENODEFILE="GNU/Linux Only"
  INCOGNITO="GNU/Linux Only"
fi

if [[ "$AUTOSETUP" == false ]] ; then

  # lol
  echo """
        ___  ___          _ _        ___ _____
        |  \/  |         | (_)      / _ |_   _|
        | .  . | ___ _ __| |_ _ __ / /_\ \| |
        | |\/| |/ _ | '__| | | '_ \|  _  || |
        | |  | |  __| |  | | | | | | | | _| |_
        \_|  |_/\___|_|  |_|_|_| |_\_| |_\___/
       """
fi

## See what arguments we got: ##


set -- "${POSITIONAL[@]}"

echo "Environment:"  # - [Auto Setup=${AUTOSETUP}] - [Detected Shell=${MERLINSSHELL}]"
echo " -- Auto Setup?        : -as | --auto-setup    :  = ${AUTOSETUP}"
echo " -- Check Node?        : -cn | --check-node    :  = ${CHECKNODE}"
echo " -- Check Venv?        : -cv | --check-venv    :  = ${CHECKVENV}"
echo "Utilities:"
echo " -- Cleanup Bundles?   : -cb | --clean-bundles :  = ${CLEANUPBUNDLES}"
echo " -- Cleanup Renders?   : -cr | --clean-renders :  = ${CLEANUPRENDERS}"
echo " -- Cleanup compiled?  : -ca | --clean-all     :  = ${CLEANUPALL}"
echo " -- Setup Flask?       : -sf | --setup-flask   :  = ${SETFLASK}"
echo "Bundle:"
echo " -- Pack Demos?        : -d  | --demos         :  = ${BUILDDEMOS}"
echo " -- Pack Annotators?   : -a  | --annotators    :  = ${BUILDANNOS}"
echo "Serve?                 : -s  | --serve         :  = ${SERVE}"
echo " -- Flask Server?      : -f  | --flask         :  = ${USEFLASK}"
echo " -- Node HTTP Server?  : -h  | --http-server   :  = ${USENODEFILE}"
echo " -- Incognito?         : -i  | --incognito     :  = ${INCOGNITO}"

if [[ "$OSTYPE" == "darwin"* ]] ; then
  # reset irrelevant args:
  USENODEFILE="none"
  INCOGNITO=false
  BROWSER=$MACBROWSER
  echo " -- Browser CLI?       :   Detected Mac OS     :  = system default "
else
  BROWSER=$DEBBROWSER
  echo " -- Browser CLI?       :   Detected Linux      :  = $DEBBROWSER "
fi

## utilities ##

if [ $CLEANUPALL == true ] ; then
  npm run-script clean-all
fi

if [ $CLEANUPBUNDLES == true ] ; then
  echo -e "\n...Cleaning Bundles..."
  find '.' -name "*_bundle.js" -print -delete
  echo -e "$CONSOLE  ...Done! :) \n"
  exit 0
fi

if [ $CLEANUPRENDERS == true ] ; then
  echo -e "\n...Cleaning Renders..."
  find '.' -name "*_render.html" -print -delete
  echo -e "$CONSOLE  ...Done! :) \n"
  exit 0
fi

# setup flask:
if [ ${SETFLASK} == true ] ; then
    npm run-script setup-app
    wait
    exit 0
fi


## webpack ##

if [ $BUILDDEMOS == true ] ; then
  echo "$CONSOLE ..packing demos, this could take a while..."
  # run primary webpack within its own process, it really does take a while
  npm run-script build-all # &> $TOOLLOG &
  wait
fi

if [ $BUILDANNOS == true ] ; then
  echo -e "$CONSOLE ...packing annotators..."
  echo "$CONSOLE ...packing leaflet annotator tool..."
  npm run-script  build-anno-tool # &> $TOOLLOG &
  wait
  echo "$CONSOLE ...packing photo annotator..."
  npm run-script  build-anno-photo # &> $PHOTOLOG &
  wait
  echo "$CONSOLE ...packing audio annotator..."
  npm run-script  build-anno-audio # &> $AUDIOLOG &
  wait
  echo "$CONSOLE Done packing annotator!"
fi


## launch ##


if [[ $SERVE == true && $USEFLASK == true ]] ; then
  npm run-script serve-app  &> $FLASKLOG &
fi

if [[ $SERVE == true && $USEFLASK == false ]] ; then
  if [[ $USENODEFILE != "none" ]] ; then
    if [[ -f $USENODEFILE ]] ; then
      npm run-script sslgen $DOMAIN
      echo -e "$CONSOLE preparing node http-server..."
      npx http-server -p 5000 -S -C ${DOMAIN}.cert -K ${DOMAIN}.key &
    else
      echo -e "$CONSOLE Can't find provided file: [ $USENODEFILE ]! Exiting..."
      exit 0
    fi
  fi
fi

if [[ $SERVE == true && $USEFLASK == true || -f $USENODEFILE ]] ; then
  echo -e "$CONSOLE Launching..."
  if [[ "$OSTYPE" == "darwin"* ]] ; then
    echo "

    $CONSOLE Detected fruit-based operating system, using browser cli $MACBROWSER
    "
    BROWSER=$MACBROWSER
  else
    echo "
    $CONSOLE Detected penguin-based operating system, using browser cli  $DEBBROWSER
    "
    BROWSER=$DEBBROWSER
  fi

  # just to make sure disk catches up to us:
  sleep 2
  ## browser ##
  # best to use incognito to avoid cross domain CORS shenanigans ~/.config and ~/.cache
  if [[ $USEFLASK == true && $INCOGNITO == true ]] ; then
      $BROWSER http://127.0.0.1:5000 --auto-open-devtools-for-tabs --allow-insecure-localhost -incognito &> $FLASKLOG &
      wait
      exit 0
  fi

   if [[ $USEFLASK == true && $INCOGNITO == false ]] ; then
      $BROWSER http://127.0.0.1:5000 &> $FLASKLOG &
      wait
      exit 0

  fi

  if [[ -f $USENODEFILE && $INCOGNITO == false ]] ; then
      $BROWSER https://127.0.0.1:5000/$USENODEFILE &> $FLASKLOG &
      wait
      exit 0

  fi

  if [[ -f $USENODEFILE && $INCOGNITO == true ]] ; then
      $BROWSER https://127.0.0.1:5000/$USENODEFILE --allow-insecure-localhost -incognito  &> $FLASKLOG &
      wait
      exit 0
  fi
fi

# check status like this:
# ps aux | grep flask
# echo -e "\nExiting Merlin AI Web Demos..."

exit 0
