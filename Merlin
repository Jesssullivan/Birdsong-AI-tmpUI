#!/bin/bash

# A cringy build script for Merlin AI web demos

# options we can configure:
BUILDDEMOS=false
BUILDANNOS=false
USEFLASK=false
USENODEFILE="none"
INCOGNITO=false
SERVE=false
CLEANUPALL=false
CLEANUPBUNDLES=false
CLEANUPRENDERS=false

#  bash --> browser:
DEBBROWSER=chromium
MACBROWSER=open

# ssl domain:
DOMAIN=./demos/web_demos

## logs ##

# logger name:
CONSOLE="Merlin:"

# stdout to some log files here instead of to the console:
LOGDIR="./.built_logs/"

# demo server logs:
FLASKFILE=flask_log.txt
FLASKLOG=$LOGDIR$FLASKFILE

# demos logs:
DEMOFILE=demos_log.txt
DEMOLOG=$LOGDIR$DEMOFILE

# general webpack logs:
ANNOTOOLFILE=anno_tool_log.txt
TOOLLOG=$LOGDIR$ANNOTOOLFILE

ANNOPHOTOFILE=anno_photo_log.txt
PHOTOLOG=$LOGDIR$ANNOPHOTOFILE

ANNOAUDIOFILE=anno_audio_log.txt
AUDIOLOG=$LOGDIR$ANNOAUDIOFILE

# ssl log:
SSLLOGFLIE=node_http_log.txt
SSLLOG=$LOGDIR$SSLLOGFLIE

# check python path:
VENVPATH=$(which python3)


## prechecks ##


#  check log stuff:

if [[ ! -d "$LOGDIR" ]]; then

  mkdir $LOGDIR

fi

# initialize log files if they aren't already there:
touch $FLASKLOG
touch $DEMOLOG
touch $TOOLLOG
touch $PHOTOLOG
touch $AUDIOLOG
touch $SSLLOG

# check node modules:
if [[ ! -d "./node_modules" ]] ; then

  echo -e "\n$CONSOLE ...did not find ./node_modules!
  please install node depends, e.g.

  npm install

  ...and try again. \n"

  exit 0

fi


# make sure we actually in the right venv:
if [[ ! $VENVPATH == *_venv/bin/* ]] ; then

  echo -e "\n$CONSOLE  ...venv path not found!
  please create / source into venv and try again, e.g. \n

    # of needed, create new venv:
    python3 -m venv merlinai_venv

    # source:
    source merlinai_venv/bin/activate

    # install Python depends:
    pip3 install -r requirements.txt
    \n"

  exit 0

fi


## build ##


# use a trap to make sure we quit child processes,
# upon receiving ` ^C `
# (e.g. flask @ `stdin`)
trap "kill 0" EXIT


## parse arguments ##


POSITIONAL=()

while [[ $# -gt 0 ]] ; do

  key="$1"

  case $key in

        -d | --demos)

        if [ $BUILDDEMOS == false ] ; then
          BUILDDEMOS=true
        fi
        shift

        ;;

        -a | --annotators)

        if [ $BUILDANNOS == false ] ; then
          BUILDANNOS=true
        fi

        shift

        ;;

        -s | --serve)

        if [ $SERVE == false ] ; then
          SERVE=true
        fi

        shift

        ;;

        -f | --flask)

        if [[ $SERVE == true && $USEFLASK == false ]] ; then
          USEFLASK=true
        fi

        shift

        ;;


        -h | --http-server)

        if [[ $SERVE == true && $USEFLASK == false ]] ; then
          USENODEFILE="$2"
        fi

        shift # past argument
        shift

        ;;

        -i | --incognito)

        if [[ $SERVE == true && $INCOGNITO == false ]] ; then
          INCOGNITO=true
        fi

        shift

        ;;

        -ca | --clean-all)

        if [ $CLEANUPALL == false ] ; then
          CLEANUPALL=true
        fi

        shift

        ;;

        -cb | --clean-bundles)

        if [ $CLEANUPBUNDLES == false ] ; then
          CLEANUPBUNDLES=true
        fi

        shift

        ;;

        -cr | --clean-renders)

        if [ $CLEANUPRENDERS == false ] ; then
          CLEANUPRENDERS=true
        fi

        shift

        ;;

        *) # unknown

        echo -e "\n$CONSOLE Received unknown argument!  Exiting....\n"

        POSITIONAL+=("$1")

        exit 1

        ;;

    esac

done

# show user relavent commands only-
if [[ "$OSTYPE" == "darwin"* ]] ; then
  USENODEFILE="GNU/Linux Only"
  INCOGNITO="GNU/Linux Only"
fi

# lol
echo """
      ___  ___          _ _        ___ _____
      |  \/  |         | (_)      / _ |_   _|
      | .  . | ___ _ __| |_ _ __ / /_\ \| |
      | |\/| |/ _ | '__| | | '_ \|  _  || |
      | |  | |  __| |  | | | | | | | | _| |_
      \_|  |_/\___|_|  |_|_|_| |_\_| |_\___/
     """

## See what arguments we got: ##


set -- "${POSITIONAL[@]}"

echo "Utilities?"
echo " -- Cleanup Bundles?   : -cb | --clean-bundles :  = ${CLEANUPRENDERS}"
echo " -- Cleanup Renders?   : -cr | --clean-renders :  = ${CLEANUPBUNDLES}"
echo " -- Cleanup compiled?  : -ca | --clean-all     :  = ${CLEANUPALL}"
echo "Build?"
echo "Pack Demos?:           : -d  | --demos         :  = ${BUILDDEMOS}"
echo "pack Annotators?:      : -a  | --annotators    :  = ${BUILDANNOS}"
echo "Serve?                 : -s  | --serve         :  = ${SERVE}"
echo " -- Flask Server?:     : -f  | --flask         :  = ${USEFLASK}"
echo " -- Node HTTP Server?  : -h  | --http-server   :  = ${USENODEFILE}"
echo " -- Incognito?         : -i  | --incognito     :  = ${INCOGNITO}"


if [[ "$OSTYPE" == "darwin"* ]] ; then

  # reset irrelavent args:
  USENODEFILE="none"
  INCOGNITO=false

  BROWSER=$MACBROWSER

  echo " -- Browser CLI?       :   Detected Mac OS     :  = system default "

else

  BROWSER=$DEBBROWSER

  echo " -- Browser CLI?       :   Detected Linux      :  = $DEBBROWSER "

fi

## utilities ##


if [ $CLEANUPALL == true ] ; then

    echo -e "\n$CONSOLE  ...Cleaning compiled..."

    CLEANUPBUNDLES=true
    CLEANUPRENDERS=true

    rm -rf .built
    rm -rf .built_logs
    rm -rf __pycache__

    echo -e "\n...cleaning ./src/*.js tsc output..."
    rm ./src/*.js

    echo -e "\n...cleaning .built/ type declarations..."
    rm -rf .built/

    echo -e "\n...cleaning openssl stuff..."
    find demos/ -name "*.key" -print -delete
    find demos/ -name "*.pem" -print -delete
    find demos/ -name "*.crt" -print -delete
    find demos/ -name "*.cert" -print -delete
    find demos/ -name "*.csr" -print -delete


    echo -e "\ncleaning renders..."
    find '.' -name "*_render.html" -print -delete

    echo -e "\ncleaning bundles..."
    find '.' -name "*_bundle.js" -print -delete

    echo -e "$CONSOLE  ...Done! :) \n"
    exit 0
fi

if [ $CLEANUPBUNDLES == true ] ; then

  echo -e "\n...Cleaning Bundles..."

  find '.' -name "*_bundle.js" -print -delete

  echo -e "$CONSOLE  ...Done! :) \n"
  exit 0
fi

if [ $CLEANUPRENDERS == true ] ; then

  echo -e "\n...Cleaning Renders..."

  find '.' -name "*_render.html" -print -delete

  echo -e "$CONSOLE  ...Done! :) \n"
  exit 0
fi


## webpack ##

# copy web assets if they aren't already there:
# cp -rf ./icons/tmpUI.MerlinAI-favicon-light/* ./demos/ &> $FLASKLOG &
cp -rf ./icons/tmpUI.MerlinAI-favicon-dark/* ./demos/ &> $FLASKLOG &
# cp -rf ./icons/Leaflet.annotation-favicon-dark/* ./demos/ &> $FLASKLOG &


if [ $BUILDDEMOS == true ] ; then

  echo -ne '(##                            (10%)\r'

  echo "$CONSOLE ...entering & packing demos, this could take a while..."

  # run primary webpack within its own process, it really does take a while
  npm run-script build-web-demos &> $TOOLLOG &

  # relax, and watch this chintzy loading graphic load while webpack runs
  sleep 2
  echo -ne '(##                            (10%)\r'
  sleep 2
  echo -ne '(####                         (15%)\r'
  sleep 2
  echo -ne '(#####                        (20%)\r'
  sleep 2
  echo -ne '(######                       (25%)\r'
  sleep 2
  echo -ne '(#######                      (30%)\r'
  sleep 2
  echo -ne '(########                     (35%)\r'
  sleep 2
  echo -ne '(#########                    (40%)\r'
  sleep 2
  echo -ne '(##########                   (45%)\r'
  sleep 2
  echo -ne '(###########                  (50%)\r'

  # wait for initial webpack to finish:

  wait

  echo "$CONSOLE Done packing demos!"

fi

if [ $BUILDANNOS == true ] ; then

  echo -ne '(###########                  (50%)\r'

  echo -e "$CONSOLE ...entering & packing annotators..."

  echo -ne '(############                 (55%)\r'

  echo "$CONSOLE ...packing leaflet annotator tool..."

  npm run-script  build-anno-tool &> $TOOLLOG &

  echo -ne '(############                 (55%)\r'

  wait

  echo -ne '(#############                (60%)\r'

  echo "$CONSOLE ...packing photo annotator..."

  echo -ne '(##############                (65%)\r'


  npm run-script  build-anno-photo &> $PHOTOLOG &

  wait

  echo -ne '(##############                (65%)\r'

  echo -ne '(###############              (70%)\r'

  echo "$CONSOLE ...packing audio annotator..."

  echo -ne '(################             (75%)\r'

  npm run-script  build-anno-audio &> $AUDIOLOG &

  wait

  echo -ne '(################             (75%)\r'

  echo -ne '(#################            (80%)\r'

  echo "$CONSOLE Done packing annotator!"


fi

## launch

if [[ $SERVE == true && $USEFLASK == true ]] ; then


  echo -ne '(##################           (80%)\r'

  echo "$CONSOLE ...(re)rendering html pages..."

  echo -ne '(##################           (80%)\r'

  find '.' -name "*_render.html" -delete &> $DEMOLOG &

  echo -ne '(###################          (85%)\r'

  wait

  echo -ne '(###################          (85%)\r'

  echo "$CONSOLE setting up flask..."

  echo -ne '(###################          (85%)\r'

  rm -rf __pycache__/ &> $FLASKLOG &

  ## launch ##

  echo -ne '(#####################        (90%)\r'

  flask run &> $FLASKLOG &

  echo -ne '(##########################   (90%)\r'

fi

if [[ $SERVE == true && $USEFLASK == false ]] ; then

  if [[ $USENODEFILE != "none" ]] ; then

    if [[ -f $USENODEFILE ]] ; then

      npm run-script sslgen $DOMAIN

      echo -e "$CONSOLE preparing node http-server..."

      npx http-server -p 5000 -S -C ${DOMAIN}.cert -K ${DOMAIN}.key &> $FLASKLOG &

    else

      echo -e "$CONSOLE Can't find provided file: [ $USENODEFILE ]! Exiting..."
      exit 0

    fi

  fi

fi

if [[ $SERVE == true && $USEFLASK == true || -f $USENODEFILE ]] ; then

  echo -e "$CONSOLE Launching..."

  echo -ne '(##########################   (90%)\r'

  if [[ "$OSTYPE" == "darwin"* ]] ; then

    echo -ne '(########################## (100%)\r'

    echo "

    $CONSOLE Detected fruit-based operating system, using browser cli $MACBROWSER
    "

    echo -ne '(########################## (100%)\r'

    BROWSER=$MACBROWSER

  else

    echo -ne '(########################## (100%)\r'

    echo "

    $CONSOLE Detected penguin-based operating system, using browser cli  $DEBBROWSER
    "

    echo -ne '(########################## (100%)\r'

    BROWSER=$DEBBROWSER

  fi

  # just to make sure disk catches up to us:
  sleep 2

  ## browser ##
  # best to use incognito to avoid cross domain CORS shenanigans ~/.config and ~/.cache
  if [[ $USEFLASK == true && $INCOGNITO == true ]] ; then

      $BROWSER http://127.0.0.1:5000 --allow-insecure-localhost -incognito &> $FLASKLOG &

      wait
      exit 0

  fi

   if [[ $USEFLASK == true && $INCOGNITO == false ]] ; then

      $BROWSER http://127.0.0.1:5000 &> $FLASKLOG &

      wait
      exit 0

  fi

  if [[ -f $USENODEFILE && $INCOGNITO == false ]] ; then

      $BROWSER https://127.0.0.1:5000/$USENODEFILE &> $FLASKLOG &

      wait
      exit 0

  fi

  if [[ -f $USENODEFILE && $INCOGNITO == true ]] ; then

      $BROWSER https://127.0.0.1:5000/$USENODEFILE --allow-insecure-localhost -incognito  &> $FLASKLOG &

      wait
      exit 0

  fi

  # check status like this:
  # ps aux | grep flask
  # echo -e "\nExiting Merlin AI Web Demos..."

fi

echo -ne '(########################## (100%)\r'

exit 0
